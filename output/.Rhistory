install.package("UsingR")
install.packages("UsingR")
getwd()
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
full_list <- list.files("directory")
print(full_list)
}
getwd()
list.files("C:/Users/Zaynaib/Documents")
myDataFrame<-data.frame()
cube <- function(x, n) {
x^3
}
cube(5)
cube(3)
cube(3,3)
cube(3,6)
library(datasets)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
?mtcars
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
length("e30fba653605dd8e8199ebc664d51394ac69da59")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
read.csv()
?read.csv()
skip()
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("swirl")
library(swirl)
packageVersion("swirl")
packageVersion("swirl")
install.packages("swirl")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
swirl()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install.packages("swirl")
library(swirl)
library("swir"l)
library("swirl")
library(swirl)
install.packages(c("bibtex", "bit64", "caret", "chron", "colorspace", "data.table", "devtools", "digest", "DSL", "evaluate", "formatR", "gdata", "gender", "ggplot2", "gridExtra", "gtable", "gtools", "hexbin", "highr", "HistData", "Hmisc", "igraph", "installr", "knitcitations", "knitr", "latticeExtra", "lubridate", "manipulate", "mapdata", "mapproj", "maps", "maptools", "markdown", "MASS", "Matrix", "memoise", "munsell", "NLP", "openNLP", "openNLPdata", "plotrix", "plyr", "qdap", "qdapDictionaries", "qdapRegex", "qdapTools", "R6", "raster", "Rcpp", "RcppEigen", "RCurl", "RefManageR", "rJava", "rmarkdown", "RMySQL", "ROAuth", "rstudioapi", "scales", "sp", "stringdist", "stringi", "stringr", "testthat", "tm", "tm.plugin.dc", "topicmodels", "twitteR", "XML"))
install.packages("swirl")
library("swirl")
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf
read.csv(path2csv,stringsAsFactors = FALSE)
mydf <-read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <-tbl_df(mydf)
rm("mydf")
print(cran)
cran
?select
select(cran,ip_id)
select(cran,ip_id, package, country)
cran[5:20]
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
(-6:10)
-(5:20)
select(x:size)
select(-3:size)
select(-3:11)
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.1.1", country == "India")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country ==
| "IN")
filter(cran, country == "US" | country =="IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran,!is.na(r_version ))
cran2<-select(cran,ip_id)
cran2<-select(cran,size:ip_id)
arrange(cran2, ip_id
)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version),ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20,size_gb= size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20,size_gb= size_mb / 2^10,correct_size)
mutate(cran3, size_mb = size / 2^20,size_gb= size_mb / 2^10,correct_size=2^5)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes =mean(size))
library(dplyr)
library(datasets)
data(mtcars)
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
sapply(mtcars, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
head(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$hp, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
colMeans(iris)
apply(iris[, 1:4], 1, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
tapply(mtcars$cyl, mtcars$hp, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
82.63-209.21
12/4
set.seed(1234)
par(mar=c(0,0,0,0))
x<-rnorm(12,mean=rep(1:3,each=4),sd=0.2)
y<-rnorm(12,mean=rep(c(1,2,1),each=4),sd=0.2)
plot(x,y,col="blue",pch=19,cex=2)
text(x+0.05,y+0.05,labels=as.character(1:12))
df<-data.frame(x=x,y=y)
dist(dataFrame)
dist(df)
distxy <- dist(df)
hClustering<-hclust(distxy)
plot(hClustering)
7/4
sd(c(5,8,12))
which.min(c(4,1,6))
?str
## Libraries needed:
library(plyr)
library(ggplot2)
library(grid)
## Step 1: read in the data
NEI <- readRDS("expdata_prj2/summarySCC_PM25.rds")
SCC <- readRDS("expdata_prj2/Source_Classification_Code.rds")
## Step 2: check the levels for types of vehicles defined
mv.sourced <- unique(grep("Vehicles", SCC$EI.Sector, ignore.case = TRUE, value = TRUE))
mv.sourcec <- SCC[SCC$EI.Sector %in% mv.sourced, ]["SCC"]
## Step 3A: subset our data Baltimore City
emMV.ba <- NEI[NEI$SCC %in% mv.sourcec$SCC & NEI$fips == "24510", ]
## Step 3B: subset our data Los Angeles County
emMV.LA <- NEI[NEI$SCC %in% mv.sourcec$SCC & NEI$fips == "06037", ]
## Step 3C: bind the data created in steps 3A and 3B
emMV.comb <- rbind(emMV.ba, emMV.LA)
## Step 4: Find the emmissions due to motor vehicles in
## Baltimore (city) and Los Angeles County
tmveYR.county <- aggregate (Emissions ~ fips * year, data =emMV.comb, FUN = sum )
tmveYR.county$county <- ifelse(tmveYR.county$fips == "06037", "Los Angeles", "Baltimore")
## Step 5: plotting to png
png("plot6.png", width=750)
qplot(year, Emissions, data=tmveYR.county, geom="line", color=county) + ggtitle(expression("Motor Vehicle Emission Levels" ~ PM[2.5] ~ "  from 1999 to 2008 in Los Angeles County, CA and Baltimore, MD")) + xlab("Year") + ylab(expression("Levels of" ~ PM[2.5] ~ " Emissions"))
setwd("D:/git/ds_challenge/output")
read.csv('Sentiment.csv')
data<-read.csv('Sentiment.csv')
View(data)
data[grep("Donald",data$canidate),]
data[grep("Donald",data$candidate),]
length(data[which(data$tweet_location,)])
length(data[which(data$tweet_location,),])
length(data[which(data$tweet_location==NA),])
length(data[which(is.NA(data$tweet_location)),])
length(data[which(is.na(data$tweet_location)),])
unique(data$candidate)
candidate_data<-split(data,candidate)
candidate_data<-split(data,data$candidate)
head(candidate_data)
?apply
?colMeans
datasets(iris)
library(datasets)
data(iris)
apply(iris, 1, mean)
names(iris)
apply(iris, 2, mean)
colMeans(iris)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
setwd("D:/git/ds_challenge/output")
library(ggplot2)
sentiment<-read.csv('Sentiment.csv')
View(data)
View(sentiment)
g<-ggplot(data=sentiment, aes(x=candidate_data,fill=factor(sentiment)))+geom_bar(stat="identity")
print(G)
print(g)
g<-ggplot(data=sentiment, aes(x=candidate_data))+geom_bar(stat="identity")
print(g)
g<-ggplot(data=sentiment, aes(x=candidate))+geom_bar(stat="identity")
print(g)
sentiment(names)
names(sentiment)
p<-ggplot(sentiment, aes(x=candidate)) +
geom_histogram(binwidth=.5, colour="black", fill="white")
print(p)
count(sentiment$candidate)
aggregate(sentiment$candidate)
aggregate(sentiment$candidate,sum)
length(sentiment$candidate)
aggregate(sentiment,by=candidate,sum)
aggregate(sentiment,by=sentiment$candidate,sum)
canidate_names<-unique(data$candidate)
aggregate(sentiment,by=list(canidate_names),sum)
aggregate(sentiment,by=list(sentiment$candidate),sum)
class(sentiment)
class(sentiment$candidate)
candidateS <- as.character(sentiment$candidate)
aggregate(sentiment,by=list(candidateS),sum)
class(candidateS)
head(candidate_data)
head(candidate_data$`Ben Carson`)
candidate_data <- with(sentiment, split(candidate))
candidate_data<-split(sentiment,candidate)
?split
candidate
candidate_data <- with(sentiment, split(sentiment,candidate))
sapply(candidate_data, nrow)
sapply(candidate_data, sum)
sapply(candidate_data, length)
countCandidate<-sapply(candidate_data, length)
class(countCandidate)
countCandidate
countCandidate<-vapply(candidate_data, length)
countCandidate<-lapply(candidate_data, length)
head(lapply)
head(countCandidate)
unlist(countCandidate)
counts<-unlist(countCandidate)
class(counts)
counts[1]
counts[2]
counts[3]
counts[4]
counts[5]
data.frame(counts)
counts
aggregate(sentiment,list(sentiment$candidate),FUN=length,na.rm=TRUE)
aggregate(sentiment,list(sentiment$candidate),FUN=length)
count_names<-aggregate(sentiment$candidate,list(sentiment$candidate),FUN=length)
count_names
count_names[2]
count_names[1]
p<-ggplot(sentiment, aes(x=count_names[1],y=count_names[2])) +geom_bar(stat="identity")
print(p)
p<-ggplot(sentiment, aes(x=count_names[1],y=factor(count_names[2])) +geom_bar(stat="identity")
P
class(count_names[1])
class(count_names[2])
class(count_names[[2]])
class(count_names[[1]])
p<-ggplot(sentiment, aes(x=count_names[[1]],y=count_names[[2]])) +geom_bar(stat="identity")
print(p)
p<-ggplot(count_names, aes(x=count_names[[1]],y=count_names[[2]])) +geom_bar(stat="identity")
print(p)
?aggregate
summary(count_names)
class(count_names)
str(count_names)
sentiment<-read.csv('Sentiment.csv', stringAsFactors=FALSE)
?read.csv
sentiment<-read.table('Sentiment.csv',header=TRUE, sep=",",stringAsFactors=FALSE)
sentiment<-read.csv('Sentiment.csv', stringsAsFactors=FALSE)
count_names<-aggregate(sentiment$candidate,list(sentiment$candidate),FUN=length)
p<-ggplot(count_names, aes(x=count_names[[1]],y=count_names[[2]])) +geom_bar(stat="identity")
print(p)
print(p)
str(count_names)
summary(sentiment)
count_names<-count_names[-1,]
count_names
count_names<-aggregate(sentiment$candidate,list(sentiment$candidate),FUN=length)
count_names
count_names<-count_names[-c(1,9),]
count_names
colnames(count_names) <-c("candidate","count")
count_names
count_names[,1]
p<-ggplot(count_names, aes(x=count_names[,1],y=count_names[,2])) +geom_bar(stat="identity")
print(p)
p<-ggplot(count_names, aes(x=count_names[,1],y=count_names[,2])) +geom_bar(stat="identity")+
xlab("Candidates") + ylab("Number of Tweets") +ggtitle("Which Candidate has the most tweets")
print(p)
count_positive<-aggregate(candidate~sentiment,sentiment,sum)
count_positive<-aggregate(candidate~sentiment,sentiment,length)
count_positive
positives<-aggregate(candidate~sentiment+candidate,sentiment,length)
positives
positives<-aggregate(sentiment,list(sentiment$candidate,sentiment$sentiment),FUN=length)
positives
sentiment[,c("candidate","sentiment")]
aggregate(sentiment[,c("candidate","sentiment")],list(sentiment$candidate,sentiment$sentiment),FUN=length)
aggregate(sentiment[,c("candidate","sentiment")],list(sentiment$sentiment),FUN=length)
aggregate(sentiment[,c("candidate","sentiment")],list(sentiment$candidate,sentiment$sentiment),FUN=length)
aggregate(sentiment[,c("sentiment")],list(sentiment$candidate,sentiment$sentiment),FUN=length)
aggregate(sentiment[,c("sentiment_count")],list(sentiment$candidate,sentiment$sentiment),FUN=length)
sentiment_counts<-aggregate(sentiment[,"sentiment"],list(sentiment$candidate,sentiment$sentiment),FUN=length)
colname(sentiment_counts)-> c("candidates,sentitments,counts")
sentiment_counts<-sentiment_counts[-1,]
sentiment_counts<-aggregate(sentiment[,"sentiment"],list(sentiment$candidate,sentiment$sentiment),FUN=length)
colnames(sentiment_counts)-> c("candidates,sentitments,counts")
sentiment_counts<-sentiment_counts[-1,]
sentiment_counts
colnames(sentiment_counts)-> c("candidates,sentitments,counts")
colnames(sentiment_counts)-> c("candidates","sentitments","counts")
colnames(sentiment_counts)-> c("candidates","feelings","counts")
names(sentiment_counts)
colnames(sentiment_counts)<- c("candidates","feelings","counts")
sentiment_counts
sentiments
sentiment
sentiment$candidate
canidate_names<-unique(data$candidate)
candidate_data
canidate_names
sentiment <- sentiment[!(candidate_names==""),]
candidate_names<-unique(sentiment$candidate)
sentiment <- sentiment[!(candidate_names==""),]
names(sentiment)
unique(names(sentiment$candidate))
sentiment$candidate
head(names(sentiment$candidate))
sentiment <- sentiment[!(sentiment==""),]
head(sentiment)
nrow(sentitment)
nrow(sentiment)
head(sentiment)
nrow(sentiment)
sentiment <- sentiment[!(sentiment==" "),]
nrow(sentiment)
sentiment<-read.csv('Sentiment.csv', stringsAsFactors=FALSE)
sentiment_clean <- sentiment[!(sentiment==" "),]
nrow(sentiment_clean)
nrow(sentiment)
View(sentiment)
View(sentiment_clean)
sentiment_counts
sentiment<-read.csv('Sentiment.csv', stringsAsFactors=FALSE,na.strings=c("", "NA"))
sentiment_counts<-aggregate(sentiment[,"sentiment"],list(sentiment$candidate,sentiment$sentiment),FUN=length)
colnames(sentiment_counts)<- c("candidates","feelings","counts")
sentiment_counts
high_positive<- sentiment_counts$candidates[which.max(sentiment_counts == "Positive"),]
which.max(sentiment_counts == "Positive")
sentiment_counts[56]
sentiment_counts[56,]
?order
which.max(sentiment_counts$feelings == "Positive")
sentiment[23,]
sentiment_counts[23,]
sentiment_counts$candidates[which.max(sentiment_counts$feelings =="Positive"),]
sentiment_counts[which.max(sentiment_counts$feelings =="Positive"),]
sentiment_counts[which.max(sentiment_counts$feelings =="Negative"),]
library(ggplot2)
sentiment<-read.csv('Sentiment.csv', stringsAsFactors=FALSE,na.strings=c("", "NA","No candidate mentioned"))
View(sentiment)
sentiment<-na.omit(sentiment)
View(sentiment)
head(sentiment)
sentiment<-read.csv('Sentiment.csv', stringsAsFactors=FALSE,na.strings=c("", "NA"))
View(Sentiment)
View(sentiment)
na.omit(sentiment)
sentiment_counts<-aggregate(sentiment[,"sentiment"],list(sentiment$candidate,sentiment$sentiment),FUN=length)
colnames(sentiment_counts)<- c("candidates","feelings","counts")
sentiment_counts
which.max(sentiment_counts)
?which.max
which.max(sentiment_counts$feelings)
which.max(sentiment_counts$counts)
sentiment_counts[8,]
sentiment_counts<-sentiment_counts[!(sentiment_counts$candidates="No candidate mentioned"),]
sentiment_counts<-sentiment_counts[!(sentiment_counts$candidates=="No candidate mentioned"),]
sentiment_counts
sentiment_counts<-aggregate(sentiment[,"sentiment"],list(sentiment$candidate,sentiment$sentiment),FUN=length)
colnames(sentiment_counts)<- c("candidates","feelings","counts")
sentiment_counts<-sentiment_counts[-(sentiment_counts$candidates=="No candidate mentioned"),]
sentiment_counts
sentiment_counts<-sentiment_counts$candidates[which.max(sentiment_counts$counts),]
sentiment_counts$candidates[which.max(sentiment_counts$counts),]
sentiment_counts[which.max(sentiment_counts$counts),]
sentiment_counts<-sentiment_counts[-(sentiment_counts$candidates=="No candidate mentioned"),]
sentiment_counts
which.max(sentiment_counts$counts)
sentiment_counts[6,]
sentiment_counts<-sentiment_counts[-(sentiment_counts$candidates=="No candidate mentioned"),]
sentiment_counts[6,]
sentiment_counts
which.max(sentiment_counts$counts)
sentiment_counts[5,]
which.max(sentiment_counts$counts)
which.max(sentiment_counts$counts)
sentiment_counts<-sentiment_counts[-(30,19,8),]
sentiment_counts<-sentiment_counts[-c(30,19,8),]
sentiment_counts
sentiment_counts[-c(8,19,30),]
sentiment_counts[-c(8),]
sentiment<-read.csv('Sentiment.csv', stringsAsFactors=FALSE,na.strings=c("", "NA","No candidate mention"))
candidate_names<-unique(sentiment$candidate)
candidate_names
sentiment<-read.csv('Sentiment.csv', stringsAsFactors=FALSE,na.strings=c("", "NA","No candidate mentioned"))
unique(sentiment$candidate)
total_sentiment_counts<-aggregate(candidate~sentiment,sentiment,length)
aggregate(candidate~sentiment,sentiment,length)
aggregate(sentiment[,"sentiment"],list(sentiment$candidate,sentiment$sentiment),FUN=length)
sentiment_counts<-aggregate(sentiment[,"sentiment"],list(sentiment$candidate,sentiment$sentiment),FUN=length)
colnames(sentiment_counts)<- c("candidates","feelings","counts")
sentiment_counts$candidates[which.max(sentiment_counts$counts),]
sentiment_counts[which.max(sentiment_counts$counts),]
sentiment_counts[which.max(sentiment_counts =="Positive"),]
sentiment_counts[which.max(sentiment_counts$feelings =="Positive"),]
sentiment_counts[which.max(sentiment_counts$feelings =="Negative"),]
Negative
sentiment_counts[which.max(sentiment_counts$feelings =="Negative"),]
sentiment_counts[grep("positive", sentiment_counts$feelings), ]
sentiment_counts[grep("Positive", sentiment_counts$feelings), ]
positive<-sentiment_counts[grep("Positive", sentiment_counts$feelings), ]
positive[which.max(positive$counts),]
negative<-sentiment_counts[grep("Negative", sentiment_counts$feelings), ]
negative[which.max(negative$counts),]
negative[which.min(negative$counts),]
positive[which.min(positive$counts),]
count_names<-aggregate(sentiment$candidate,list(sentiment$candidate),FUN=length)
colnames(count_names) <-c("candidate","count")
g<-ggplot(count_names, aes(x=count_names[,1],y=count_names[,2])) +geom_bar(stat="identity")+
xlab("Candidates") + ylab("Number of Tweets") +ggtitle("Which Candidate has the most tweets")
print(g)
g<-ggplot(sentiment_counts, aes(x=sentiment_counts[,1],y=sentiment_counts[,3], fill=sentiment_counts[,2])) +geom_bar(stat="identity")+
xlab("Candidates") + ylab("Number of Tweets") +ggtitle("Which Candidate has the most tweets")
print(g)
max_retweet<-sentiment[which.max(sentiment$retweet_count),]
print(max_retweet$name)
print(paste(max_retweet$name,max_retweet$text))
?grep
blm<-sentiment[grep("Black Lives",ignore.case=TRUE),]
blm<-sentiment[grep("Black Lives",sentiment$text,ignore.case=TRUE),]
blm
nrow(blm)
blm$text
b <- ggplot(count_names, aes(count_names[,1],count_names[,2],size=count_names[,2], label=count_names[,1]))
b <- p+geom_point(colour="red") +scale_area(to=c(1,20))+geom_text(size=3)
b+ xlab("Murders per 1,000 population") + ylab("Burglaries per 1,000")
b <- ggplot(count_names, aes(count_names[,1],count_names[,2],size=count_names[,2], label=count_names[,1]))
b <- b+geom_point(colour="red") +scale_area(to=c(1,20))+geom_text(size=3)
b+ xlab("Murders per 1,000 population") + ylab("Burglaries per 1,000")
b <- ggplot(count_names, aes(count_names[,1],count_names[,2],size=count_names[,2], label=count_names[,1]))
b <- b+geom_point(colour="red") +geom_text(size=3)
b+ xlab("Murders per 1,000 population") + ylab("Burglaries per 1,000")
b <- ggplot(count_names, aes(count_names[,1],count_names[,2],size=count_names[,2], label=count_names[,1]))
b <- b+geom_point(colour="red") +geom_text(size=3)+scale_size_area(max_size = 15)
plot(b)
b <- ggplot(count_names, aes(count_names[,1],count_names[,2],size=count_names[,2], label=count_names[,1],fill=count_names[,1]))
b <- b+geom_point(colour="red") +geom_text(size=3)+scale_size_area(max_size = 15)
print(b)
